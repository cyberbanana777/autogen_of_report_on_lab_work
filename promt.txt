ДАННЫЕ ОТ МЕНЯ:

1. СПИСОК КРАТИНОК:

Результат программы.png
схема АМ передатчика.png

2. КАКАЯ ЛАБОРАТОРНАЯ РАБОТА:

нужно оформить 1 лабораторную работу из файла


Задача: Ты — AI-ассистент для автоматизации оформления академических отчетов. Твоя цель — проанализировать предоставленные мной данные и на основе примера кода создать готовый, работающий Python-скрипт, который генерирует финальный .docx-отчет для конкретной лабораторной работы.

Контекст:
Я предоставляю тебе пакет файлов. Ты должен будешь их проанализировать и создать скрипт, который соберет из них итоговый отчет. Скрипт должен быть написан на библиотеке python-docx.

Входные данные (файлы):

example_script.py: Пример кода, который корректно генерирует .docx-файл. Это основа для твоей работы. Ты должен взять его за образец, переработать, улучшить и адаптировать под текущую задачу. В нем реализованы базовые функции (парсинг секций, добавление картинок, настройка стилей), но его логику и структуру нужно доработать.

title_page.docx: Готовый титульный лист, заполненный по правилам ВУЗа. Скрипт должен открыть этот файл и начать добавлять основной текст со второй страницы.

requirements.md (или .docx, .pdf): Файл с официальными требованиями к оформлению (поля, шрифт, интервалы, структура). Скрипт должен строго следовать этим требованиям.

methodology.md (или иной формат): Текст методички. Внимание: этот файл может содержать описание нескольких лабораторных работ.

lab_data.md (опционально): Может содержать необработанные данные для отчета (таблицы, формулы, сырые результаты измерений в формате Markdown, CSV или др.). Если этого файла нет, все данные нужно взять из методички.

Ключевые инструкции для тебя:

Выбор лабораторной: Я явно указала, какую именно лабораторную работу из файла методички нужно оформить (например, "Лабораторная работа №3").

Анализ и синтез текста: Ты должен будешь проанализировать текст методички, извлечь из него описание указанной мной лабораторной работы. Если предоставлен файл lab_data.md, ты должен интегрировать его данные (таблицы, значения) в основной текст, "обыграв" их и добавив связующий текст (описания, выводы) для формирования законченного отчета.

Нумерация страниц: Ты самостоятельно должен реализовать в скрипте корректную нумерацию страниц. Учти, что титульный лист не нумеруется, а нумерация должна начинаться с содержания или введения (со страницы 2).

Структура отчета: Готовый отчет должен содержать все стандартные разделы:

Титульный лист (готовый файл)

Цель работы

Задание

Теоретические сведения

Расчеты и результаты (с графиками и таблицами)

Выводы

Ответы на контрольные вопросы

Список литературы

Графики: Скрипт должен вставлять изображения (например, scheme.png, result.png) в указанные места отчета с подписями по центру.

Конечный продукт:
Готовый к запуску Python-скрипт (lab_report_generator.py), который:

Открывает title_page.docx.

Начинает добавление текста со второй страницы.

Форматирует весь текст строго согласно requirements.md.

Генерирует полный текст отчета на основе данных из methodology.md и lab_data.md для указанной мной лабораторной работы.

Корректно вставляет все необходимые графики и таблицы.

Проставляет нумерацию страниц, начиная со второй.

Сохраняет итоговый документ под новым именем (например, Лабораторная_работа_№X_отчет.docx).

Дополнительное задание:
Сделай код скрипта хорошо прокомментированным, модульным и легко адаптируемым для будущих лабораторных работ. Подумай, как легко можно будет изменить входные файлы и номер работы для генерации нового отчета.


# ИНСТРУКЦИЯ ДЛЯ СОЗДАНИЯ СКРИПТА ГЕНЕРАЦИИ DOCX-ОТЧЕТОВ

## 1. АНАЛИЗ ИСХОДНЫХ ДАННЫХ

### 1.1. Изучить требования к оформлению:
- Формат страницы (А4)
- Поля: верхнее, нижнее, левое, правое
- Шрифт: Times New Roman, 12pt
- Межстрочный интервал: 1.5
- Отступ красной строки: 1.0 см
- Выравнивание: по ширине
- Нумерация страниц: снизу по центру

### 1.2. Проанализировать структуру отчета:
```
1. Титульный лист
2. Цель работы
3. Задача работы  
4. Теоретические сведения
5. Расчетно-графическая часть
6. Выводы по работе
7. Ответы на контрольные вопросы
8. Список литературы
```

### 1.3. Определить места для изображений:
- Где должны располагаться рисунки
- Какие подписи к ним нужны
- Размер изображений

## 2. ПОДГОТОВКА ТЕКСТОВОГО ШАБЛОНА

### 2.1. Создать структуру с метками:
```python
report_text = """
[SECTION_START SectionName]
Текст раздела
[IMAGE_PLACEHOLDER] - для вставки изображений
Текст продолжение
[SECTION_END SectionName]
"""
```

### 2.2. Секции должны включать:
- Title - титульный лист
- Goal - цель работы
- Task - задача работы
- Theory - теоретические сведения
- Calculations - расчетно-графическая часть
- Conclusions - выводы
- Test - контрольные вопросы
- Bibliography - литература

### 2.3. Метки для изображений:
```
[IMAGE_SCHEME] - структурная схема
[IMAGE_RESULT] - результаты
[IMAGE_GRAPH1] - график 1
[IMAGE_GRAPH2] - график 2
```

## 3. НАСТРОЙКА ФУНКЦИЙ

### 3.1. Функция парсинга:
```python
def parse_sections(text):
    sections = {}
    lines = text.strip().split('\n')
    current_section = None
    content = []
    
    for line in lines:
        if line.startswith('[SECTION_START'):
            current_section = line.split(' ')[1].replace(']', '')
            content = []
        elif line.startswith('[SECTION_END'):
            sections[current_section] = '\n'.join(content).strip()
            current_section = None
            content = []
        elif current_section is not None:
            content.append(line)
    
    return sections
```

### 3.2. Настройка страницы:
```python
def set_page_settings(doc):
    section = doc.sections[0]
    section.page_height = Cm(29.7)  # A4
    section.page_width = Cm(21)     # A4
    section.top_margin = Cm(2)
    section.bottom_margin = Cm(2)
    section.left_margin = Cm(3)     # Важно для отступов!
    section.right_margin = Cm(1.5)
```

### 3.3. Добавление заголовков:
```python
def add_heading(doc, text, level=1):
    heading = doc.add_heading(text, level=level)
    for run in heading.runs:
        run.font.name = 'Times New Roman'
        run.font.size = Pt(14)
        run.bold = True
```

### 3.4. Добавление абзацев:
```python
def add_paragraph(doc, text, bold=False, italic=False):
    if not text.strip(): return
        
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
    run = p.add_run(text)
    run.font.name = 'Times New Roman'
    run.font.size = Pt(12)
    run.bold = bold
    run.italic = italic
    
    p.paragraph_format.line_spacing = 1.5
    p.paragraph_format.first_line_indent = Cm(1.0)  # Красная строка
```

### 3.5. Вставка изображений:
```python
def add_image_with_caption(doc, image_path, caption_text, width=Cm(12)):
    try:
        # Добавление изображения
        paragraph = doc.add_paragraph()
        paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = paragraph.add_run()
        run.add_picture(image_path, width=width)
        
        # Добавление подписи
        caption_paragraph = doc.add_paragraph()
        caption_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        caption_run = caption_paragraph.add_run(caption_text)
        caption_run.font.name = 'Times New Roman'
        caption_run.font.size = Pt(12)
        caption_run.italic = True
        
    except FileNotFoundError:
        # Заглушка если изображение не найдено
        paragraph = doc.add_paragraph()
        paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = paragraph.add_run(f"[Изображение: {image_path} не найдено]")
```

### 3.6. Обработка текста с изображениями:
```python
def process_text_with_images(doc, text, section_name):
    lines = text.split('\n')
    
    for line in lines:
        if not line.strip(): continue
            
        if line.strip() == '[IMAGE_SCHEME]':
            add_image_with_caption(doc, "scheme.png", "Рисунок 1 - Схема")
        elif line.strip() == '[IMAGE_RESULT]':
            add_image_with_caption(doc, "result.png", "Рисунок 2 - Результаты")
        else:
            add_paragraph(doc, line)
```

### 3.7. Нумерация страниц:
```python
def setup_page_numbers(doc):
    """Простая настройка нумерации страниц"""
    # Добавляем нумерацию только начиная со второй страницы
    for i, section in enumerate(doc.sections):
        if i == 0:  # Пропускаем титульную страницу
            continue
            
        # Очищаем существующий footer
        footer = section.footer
        if footer:
            # Отключаем связь с предыдущим footer
            footer.is_linked_to_previous = False
            
            # Удаляем все существующие параграфы
            for paragraph in footer.paragraphs:
                p = paragraph._element
                p.getparent().remove(p)
        
        # Создаем новый footer
        footer = section.footer
        paragraph = footer.add_paragraph()
        paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Добавляем простой текст с номером страницы
        run = paragraph.add_run(str(i))  # i будет равно 1, 2, 3 и т.д.
        run.font.name = 'Times New Roman'
        run.font.size = Pt(10)
```

## 4. ГЛАВНАЯ ФУНКЦИЯ

```python
def main():
    # 1. Парсинг текста
    sections = parse_sections(report_text)
    
    # 2. Создание документа
    try:
        doc = Document("title_page.docx")  # Готовый титульный лист
    except:
        doc = Document()  # Или создаем новый
    
    # 3. Настройка документа
    set_page_settings(doc)
    setup_page_numbers(doc)
    doc.add_page_break()  # После титульного листа
    
    # 4. Добавление разделов в правильном порядке
    section_order = ['Goal', 'Task', 'Theory', 'Calculations', 
                    'Conclusions', 'Test', 'Bibliography']
    
    for i, section_name in enumerate(section_order, 1):
        if section_name in sections:
            add_heading(doc, f"{i}. {russian_names[section_name]}", level=1)
            process_text_with_images(doc, sections[section_name], section_name)
    
    # 5. Сохранение
    doc.save("output.docx")
```

## 5. ПЕРЕМЕННЫЕ ДЛЯ НАСТРОЙКИ

```python
# Имена файлов
input_file = "title_page.docx"
output_file = "Отчет.docx"

# Изображения
images = {
    'SCHEME': "схема.png",
    'RESULT': "результат.png", 
    'GRAPH1': "график1.png"
}

# Русские названия разделов
russian_names = {
    'Goal': 'Цель работы',
    'Task': 'Задача работы',
    'Theory': 'Теоретические сведения',
    # ...
}
```

## 6. ЧЕК-ЛИСТ ПЕРЕД ЗАПУСКОМ

1. [ ] Проверить пути к изображениям
2. [ ] Убедиться в правильности отступов (Cm(1.0))
3. [ ] Проверить порядок разделов
4. [ ] Убедиться в наличии всех меток в тексте
5. [ ] Проверить русские названия разделов
6. [ ] Убедиться в правильной нумерации страниц
7. [ ] Проверить обработку ошибок (отсутствующие файлы)

## 7. ОБРАБОТКА ОШИБОК

- Файл титульного листа не найден → создать новый документ
- Изображение не найдено → добавить текстовую заглушку  
- Секция не найдена → пропустить с предупреждением
- Неправильная структура → вывести диагностику

# ИНСТРУКЦИЯ ПО СОЗДАНИЮ ГЕНЕРАТОРОВ ОТЧЕТОВ DOCX

## 1. ПОДГОТОВКА ДОКУМЕНТА

### ✅ Проверка стилей документа
```python
def check_document_styles(doc):
    """Проверяет наличие необходимых стилей в документе"""
    required_styles = ['Normal', 'Heading 1', 'Heading 2', 'Heading 3']
    available_styles = [style.name for style in doc.styles]
    
    for style in required_styles:
        if style not in available_styles:
            print(f"⚠ Внимание: стиль '{style}' отсутствует в документе")
            # Создаем заглушку для отсутствующих стилей
            if style.startswith('Heading'):
                return False
    return True
```

### ✅ Безопасное создание заголовков
```python
def safe_add_heading(doc, text, level=1):
    """Безопасное добавление заголовка с обработкой отсутствующих стилей"""
    try:
        heading = doc.add_heading(text, level=level)
        # Применяем форматирование вручную
        for run in heading.runs:
            run.font.name = 'Times New Roman'
            run.font.size = Pt(16 if level == 1 else 14)
            run.bold = True
        return heading
        
    except KeyError as e:
        print(f"⚠ Стиль заголовка {level} уровня отсутствует, создаем вручную")
        # Создаем заголовок через обычный параграф
        heading = doc.add_paragraph()
        heading.style = doc.styles['Normal']
        run = heading.add_run(text)
        run.font.name = 'Times New Roman'
        run.font.size = Pt(16 if level == 1 else 14)
        run.bold = True
        return heading
```

## 2. ОБРАБОТКА ДАННЫХ

### ✅ Валидация входных данных
```python
def validate_data_structure(data, expected_columns):
    """Проверяет структуру данных перед созданием таблицы"""
    if not hasattr(data, 'dtype') or not hasattr(data, 'shape'):
        raise ValueError("Данные должны быть numpy массивом с определенной структурой")
    
    actual_columns = data.dtype.names
    if actual_columns != expected_columns:
        raise ValueError(f"Ожидались колонки {expected_columns}, получены {actual_columns}")
    
    return True
```

### ✅ Создание таблицы с защитой от ошибок
```python
def safe_create_table(doc, data, table_title, column_names):
    """Безопасное создание таблицы с данными"""
    try:
        # Проверяем данные
        validate_data_structure(data, tuple(column_names.keys()))
        
        # Создаем заголовок таблицы (без использования стилей Heading)
        title_para = doc.add_paragraph()
        title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = title_para.add_run(table_title)
        run.font.bold = True
        run.font.name = 'Times New Roman'
        run.font.size = Pt(12)
        
        # Создаем таблицу
        table = doc.add_table(rows=1, cols=len(column_names))
        table.style = 'Table Grid'
        
        # Заполняем заголовки
        hdr_cells = table.rows[0].cells
        for i, (col_name, col_format) in enumerate(column_names.items()):
            hdr_cells[i].text = col_name
            # Форматируем заголовки
            for paragraph in hdr_cells[i].paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in paragraph.runs:
                    run.font.bold = True
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(10)
        
        # Заполняем данные
        for row_data in data:
            row_cells = table.add_row().cells
            for i, col_name in enumerate(column_names.keys()):
                value = row_data[col_name]
                # Применяем форматирование
                if isinstance(value, float):
                    cell_text = f"{value:{column_names[col_name]}}"
                else:
                    cell_text = str(value)
                
                row_cells[i].text = cell_text
                # Форматируем ячейки
                for paragraph in row_cells[i].paragraphs:
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in paragraph.runs:
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(10)
        
        return table
        
    except Exception as e:
        print(f"❌ Ошибка при создании таблицы: {e}")
        # Добавляем сообщение об ошибке вместо таблицы
        error_para = doc.add_paragraph()
        error_para.add_run(f"Ошибка создания таблицы: {str(e)}")
        return None
```

## 3. ОБРАБОТКА ИЗОБРАЖЕНИЙ

### ✅ Защищенная вставка изображений
```python
def safe_add_image(doc, image_path, caption, width=Cm(12)):
    """Безопасное добавление изображения с обработкой отсутствующих файлов"""
    try:
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"Файл {image_path} не найден")
        
        # Добавляем изображение
        para = doc.add_paragraph()
        para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        run = para.add_run()
        run.add_picture(image_path, width=width)
        
        # Добавляем подпись
        caption_para = doc.add_paragraph()
        caption_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        caption_run = caption_para.add_run(caption)
        caption_run.italic = True
        caption_run.font.name = 'Times New Roman'
        
        return True
        
    except FileNotFoundError:
        # Заглушка для отсутствующего изображения
        missing_para = doc.add_paragraph()
        missing_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        missing_run = missing_para.add_run(f"[Изображение отсутствует: {os.path.basename(image_path)}]")
        missing_run.font.color.rgb = RGBColor(255, 0, 0)  # Красный цвет для предупреждения
        return False
        
    except Exception as e:
        print(f"❌ Ошибка при добавлении изображения {image_path}: {e}")
        return False
```

## 4. ОСНОВНАЯ СТРУКТУРА ГЕНЕРАТОРА

### ✅ Безопасный главный цикл
```python
def generate_report_safely():
    """Безопасная генерация отчета с обработкой ошибок"""
    try:
        # 1. Проверяем существование титульного листа
        if not os.path.exists(TITLE_PAGE_FILE):
            print("⚠ Титульный лист не найден, создаем новый документ")
            doc = Document()
            # Применяем базовые настройки
            apply_basic_settings(doc)
        else:
            doc = Document(TITLE_PAGE_FILE)
            # Проверяем стили документа
            if not check_document_styles(doc):
                print("⚠ В документе отсутствуют некоторые стили, применяем обходные решения")
        
        # 2. Настройка документа
        set_page_settings(doc)
        setup_page_numbers(doc)
        
        # 3. Добавляем разделы с обработкой ошибок
        for section_name in SECTION_ORDER:
            if section_name in sections:
                try:
                    add_section_safely(doc, section_name, sections[section_name])
                except Exception as e:
                    print(f"❌ Ошибка в разделе {section_name}: {e}")
                    # Добавляем сообщение об ошибке
                    error_para = doc.add_paragraph()
                    error_para.add_run(f"Ошибка обработки раздела {section_name}: {str(e)}")
        
        # 4. Сохраняем документ
        doc.save(OUTPUT_FILE)
        print(f"✓ Отчет сохранен: {OUTPUT_FILE}")
        
    except Exception as e:
        print(f"❌ Критическая ошибка при генерации отчета: {e}")
        # Создаем минимальный отчет с ошибкой
        create_error_report(e)
```

## 5. ЧЕК-ЛИСТ ПЕРЕД ЗАПУСКОМ

### 🔍 Проверить перед запуском:
1. [ ] Существуют ли все указанные файлы изображений
2. [ ] Правильность структуры данных для таблиц
3. [ ] Наличие всех необходимых стилей в шаблоне
4. [ ] Корректность путей к файлам
5. [ ] Доступность всех импортируемых модулей
6. [ ] Соответствие ожидаемых и фактических названий колонок данных

### 🛡️ Защитные механизмы:
- Все функции должны иметь обработку исключений
- Проверять существование файлов перед использованием
- Иметь fallback-решения для отсутствующих стилей
- Логировать все ошибки для отладки
- Создавать минимально рабочий документ даже при ошибках

### 📝 Пример использования:
```python
# Определяем форматирование колонок
COLUMN_FORMATS = {
    'theta': '.0f',      # целые числа
    'U_SO': '.2f',       # 2 знака после запятой
    'U_CO': '.2f',
    # ... остальные колонки
}

# Безопасное создание таблицы
safe_create_table(
    doc, 
    data, 
    "Таблица 1 - Экспериментальные данные",
    COLUMN_FORMATS
)
```

Замечания по оформлению:
Так же таблицы пописывается сверху выравниванием слева не жирным
Нумерация страниц должна быть по середине 
Сначало в тексете должена быть ссылка на рисунок, а потом уже рисунок. То есть ссылка предшествует рисунку
Совмещенные графики нужно указывать там где говориться про анализ графиков
Не нужно отвечать на вопросы для самоконтроля, а на контрольные вопросы и контрольные тексты - нужно