from docx import Document
from docx.shared import Pt, Cm, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.enum.table import WD_TABLE_ALIGNMENT
import numpy as np
import os
import re

# Конфигурационные параметры
TITLE_PAGE_FILE = "title_page.docx"
OUTPUT_FILE = "Лабораторная_работа_1_отчет.docx"
LAB_WORK_NUMBER = 1  # Номер лабораторной работы

# Пути к изображениям
IMAGE_PATHS = {
    'U_CO': "U_CO.png",
    'SH_voltages': "SH_voltages.png",
    'U_lo': "U_lo.png",
    'U_SH': "U_SH.png",
    'U_SH12C': "U_SH12C.png",
    'U_SH2C': "U_SH2C.png",
    'U_SH1C': "U_SH1C.png",
    'U_SO': "U_SO.png",
    'linear_voltages': "linear_voltages.png",
    'U_ln': "U_ln.png"
}

# Текст отчета с метками
report_text = """
[SECTION_START Goal]
Целью лабораторной работы является ознакомление с принципом действия вращающихся трансформаторов (резольверов) и экспериментальное определение основных характеристик серийного вращающегося трансформатора (ВТ) КФ3.031.053 серии ВТ-5 в синусно-косинусном и линейном режимах его работы.
[SECTION_END Goal]

[SECTION_START Task]
1. Ознакомиться с конструктивным устройством ВТ серии ВТ-5 и справочными данными на исследуемый типоразмер ВТ.

2. Исследовать синусно-косинусный режим работы ВТ, а именно при напряжении возбуждения (действующем значении) U_B = 8 В и частоте этого напряжения f = 500 Гц снять и построить зависимости от угла поворота ротора:
- напряжений на синусной и косинусной обмотках при отсутствии нагрузки на обеих роторных обмотках (режим холостого хода) и разомкнутой компенсационной обмотке - U_SO = f(θ) и U_CO = f(θ) соответственно;
- напряжения на синусной обмотке при наличии на ней нагрузки R_SH = 300 Ом, отсутствии нагрузки на косинусной обмотке и разомкнутой компенсационной обмотке - U_SH = f(θ);
- напряжения на синусной обмотке при наличии на ней нагрузки R_SH = 300 Ом, отсутствии нагрузки на косинусной обмотке и замкнутой накоротко компенсационной обмотке - U_SH1C = f(θ);
- напряжения на синусной обмотке при наличии одинаковых нагрузок на синусной R_SH = 300 Ом и косинусной R_CH = 300 Ом обмотках и разомкнутой компенсационной обмотке - U_SH2C = f(θ);
- напряжения на синусной обмотке при наличии одинаковых нагрузок на синусной R_SH = 300 Ом и косинусной R_CH = 300 Ом обмотках и замкнутой накоротко компенсационной обмотке - U_SH12C = f(θ).

3. Исследовать линейный режим работы ВТ, а именно при напряжении возбуждения U_B = 8 В и частоте этого напряжения f = 500 Гц снять и построить зависимости напряжения на выходной (синусной) обмотке от угла поворота ротора для случаев:
- отсутствия нагрузки на синусной обмотке (режим холостого хода) - U_ЛО = f(θ);
- наличия нагрузки на синусной обмотке R_SH = 300 Ом - U_ЛН = f(θ).
[SECTION_END Task]

[SECTION_START Theory]
Вращающийся трансформатор (ВТ) - это электрическая машина переменного тока, предназначенная для преобразования угла поворота ротора в электрические сигналы. ВТ находят широкое применение в системах автоматического управления, следящих системах, робототехнике и измерительной технике.

Принцип действия ВТ основан на явлении электромагнитной индукции. При вращении ротора изменяется взаимное положение обмоток, что приводит к изменению коэффициента трансформации и, следовательно, выходного напряжения.

Основные режимы работы ВТ:
1. Синусно-косинусный режим - позволяет получать на выходе напряжения, пропорциональные синусу и косинусу угла поворота.
2. Линейный режим - обеспечивает линейную зависимость выходного напряжения от угла поворота в определенном диапазоне.

Для уменьшения погрешностей ВТ применяют симметрирование:
- Первичное симметрирование - замыкание компенсационной обмотки
- Вторичное симметрирование - подключение одинаковых нагрузок к синусной и косинусной обмоткам

Лабораторная установка включает: вращающийся трансформатор серии ВТ-5, источник переменного напряжения, осциллографы, нагрузочные сопротивления, угломер.
[SECTION_END Theory]

[SECTION_START Calculations]
4.1. Экспериментальные данные

В ходе лабораторной работы были получены следующие экспериментальные данные при напряжении возбуждения U_B = 8 В и частоте f = 500 Гц:

[TABLE_EXPERIMENTAL_DATA]

4.2. Анализ характеристик вращающегося трансформатора

4.2.1. Синусно-косинусный режим работы

На рисунке 1 представлена зависимость напряжения на косинусной обмотке от угла поворота ротора.
[IMAGE_U_CO]

Как видно из графика, напряжение на косинусной обмотке U_CO имеет максимальное значение при θ = 0° и минимальное при θ = 90°, что соответствует теоретическим ожиданиям.

На рисунке 2 показана зависимость напряжения на синусной обмотке в режиме холостого хода.
[IMAGE_U_SO]

Напряжение U_SO изменяется по синусоидальному закону, принимая нулевое значение при θ = 0° и максимальное при θ = 90°.

На рисунке 3 представлено напряжение на синусной обмотке при наличии нагрузки R_SH = 300 Ом.
[IMAGE_U_SH]

При подключении нагрузки наблюдается уменьшение амплитуды выходного напряжения по сравнению с режимом холостого хода.

На рисунке 4 показано влияние первичного симметрирования (замыкания компенсационной обмотки) на характеристику U_SH1C.
[IMAGE_U_SH1C]

Первичное симметрирование позволяет уменьшить погрешности, вызванные нагрузкой на синусной обмотке.

На рисунке 5 демонстрируется эффект вторичного симметрирования (подключения одинаковых нагрузок) на характеристику U_SH2C.
[IMAGE_U_SH2C]

Вторичное симметрирование обеспечивает лучшую компенсацию погрешностей.

На рисунке 6 представлен результат совместного применения обоих видов симметрирования - характеристика U_SH12C.
[IMAGE_U_SH12C]

Совместное использование первичного и вторичного симметрирования дает наилучшие результаты по уменьшению погрешностей.

На рисунке 7 представлены совмещенные графики всех исследованных характеристик синусно-косинусного режима.
[IMAGE_SH_voltages]

Анализ совмещенных графиков позволяет наглядно сравнить влияние различных видов симметрирования на характеристики ВТ.

4.2.2. Линейный режим работы

На рисунке 8 показана характеристика линейного режима в режиме холостого хода U_ЛО.
[IMAGE_U_lo]

В линейном режиме выходное напряжение изменяется практически линейно в диапазоне углов примерно от 0° до 60°.

На рисунке 9 представлена характеристика линейного режима при наличии нагрузки R_SH = 300 Ом U_ЛН.
[IMAGE_U_ln]

Подключение нагрузки приводит к уменьшению крутизны характеристики и некоторому искажению линейности.

На рисунке 10 представлены совмещенные графики характеристик линейного режима.
[IMAGE_linear_voltages]

Сравнение характеристик показывает, что наличие нагрузки ухудшает линейность преобразования, особенно в области больших углов.

4.3. Выводы по экспериментальной части

Экспериментально подтверждены теоретические зависимости напряжений на обмотках ВТ от угла поворота ротора. Установлено, что:
1. Напряжение на косинусной обмотке изменяется по косинусоидальному закону
2. Напряжение на синусной обмотке изменяется по синусоидальному закону  
3. Подключение нагрузки приводит к уменьшению выходного напряжения
4. Симметрирование позволяет существенно уменьшить погрешности ВТ
5. Линейный режим обеспечивает линейную зависимость в ограниченном диапазоне углов
[SECTION_END Calculations]

[SECTION_START Conclusions]
В ходе лабораторной работы были успешно исследованы характеристики вращающегося трансформатора серии ВТ-5 в синусно-косинусном и линейном режимах работы.

Экспериментально подтверждены теоретические положения о характере изменения выходных напряжений в зависимости от угла поворота ротора. Установлено влияние нагрузки и различных видов симметрирования на характеристики ВТ.

Определено, что линейный режим работы обеспечивает приемлемую линейность преобразования в диапазоне углов приблизительно от 0° до 60°.

Цель работы достигнута - получены практические навыки исследования характеристик вращающихся трансформаторов и экспериментально определены их основные параметры.
[SECTION_END Conclusions]

[SECTION_START Test]
1. Расскажите про назначение, области применения и возможные конструктивные исполнения ВТ.

Ответ: Вращающиеся трансформаторы предназначены для преобразования угла поворота в электрические сигналы. Применяются в системах автоматического управления, следящих системах, робототехнике, измерительной технике. Конструктивно представляют собой электрическую машину переменного тока с ротором и статором, на которых расположены обмотки.

2. Приведите конструктивную и электрическую схемы двухполюсного СКВТ и поясните принцип его действия.

Ответ: Двухполюсный СКВТ имеет на статоре обмотку возбуждения, на роторе - синусную и косинусную обмотки. При подаче напряжения на обмотку возбуждения и вращении ротора, в синусной и косинусной обмотках наводятся ЭДС, пропорциональные sinθ и cosθ соответственно.

3. Перечислите возможные причины возникновения погрешностей измерений СКВТ. Аргументируйте необходимость симметрирования СКВТ.

Ответ: Причины погрешностей: неидеальность магнитной системы, неточность изготовления, влияние нагрузки. Симметрирование необходимо для компенсации погрешностей, вызванных подключением нагрузки и улучшения точности преобразования.

4. Как реализуется первичное (со стороны статора) симметрирование СКВТ? Каковы преимущества и недостатки первичного симметрирования?

Ответ: Первичное симметрирование реализуется замыканием компенсационной обмотки накоротко. Преимущество: простота реализации. Недостаток: неполная компенсация погрешностей.

5. Каким образом осуществляется вторичное симметрирование СКВТ? Приведите и поясните основное условие реализации вторичного симметрирования.

Ответ: Вторичное симметрирование осуществляется подключением одинаковых нагрузок к синусной и косинусной обмоткам. Основное условие: R_SH = R_CH.

6. Приведите какой-либо вариант схемного исполнения двухполюсного ЛВТ и поясните принцип его действия.

Ответ: Линейный ВТ реализуется специальным включением обмоток для получения линейной зависимости выходного напряжения от угла. Принцип действия основан на сложении сигналов с синусной и косинусной обмоток.

7. Объясните отличия в виде выходных характеристик в случаях отсутствия и наличия нагрузок на выходных обмотках ВТ.

Ответ: При наличии нагрузки амплитуда выходного напряжения уменьшается, могут появляться искажения формы характеристики, особенно при больших углах.

8. Как реализуется вращающийся трансформатор – построитель? Как он работает и какие задачи он может решать?

Ответ: ВТ-построитель предназначен для вычисления тригонометрических функций. Может решать задачи нахождения sinθ, cosθ, преобразования координат.

9. Каким образом можно использовать вращающиеся трансформаторы для реализации измерителя рассогласования?

Ответ: ВТ можно использовать в мостовых схемах для измерения рассогласования между заданным и фактическим углом поворота.

10. Каковы конструктивные особенности поворотных и линейных индуктосинов? В чем их основное преимущество по сравнению с вращающимися трансформаторами традиционного исполнения?

Ответ: Индуктосины имеют печатные обмотки, что обеспечивает высокую точность и разрешающую способность. Основное преимущество - бесконтактность и высокая точность.
[SECTION_END Test]

[SECTION_START Bibliography]
1. Воротников С.А. Информационные устройства робототехнических систем: Учеб. пособие. — М.: Изд-во МГТУ им. Н.Э. Баумана, 2005. — 384 с.

2. Волков Н.И., Миловзоров В.П. Электромашинные устройства автоматики: Учеб. пособие для вузов. — М.: Высш. шк., 1986. — 334 с.

3. Сабинин Ю. А. Электромашинные устройства автоматики: Учеб. для вузов. — Л.: Энергоатомиздат, 1988. — 408 с.

4. Цыпкин В.Н., Казаманов В.А. Информационные элементы робототехнических систем, часть 1: Методические указания. — М.: МИРЭА – Российский технологический университет, 2018.
[SECTION_END Bibliography]
"""

# Экспериментальные данные из lab_data.md
experimental_data = np.array([
    (0, 1.2, 34.44, 1.20, 1.0, 1.20, 1.0, 2.01, 1.4),
    (9, 5.63, 34.64, 2.01, 4.43, 4.02, 4.22, 2.81, 2.61),
    (18, 12.28, 34.24, 4.02, 8.45, 8.45, 8.45, 8.05, 6.04),
    (27, 16.91, 33.43, 5.43, 11.68, 11.88, 11.48, 15.1, 9.86),
    (36, 21.75, 31.21, 7.45, 15.50, 14.70, 14.70, 26.78, 15.3),
    (45, 26.38, 28.60, 10.27, 18.12, 17.92, 17.92, 33.43, 16.73),
    (54, 30.21, 23.96, 14.50, 20.54, 20.74, 20.54, 38.26, 20.54),
    (63, 32.62, 19.33, 17.92, 22.55, 22.55, 22.55, 39.87, 21.55),
    (72, 33.63, 13.49, 21.95, 23.96, 24.37, 23.96, 37.66, 21.55),
    (81, 34.84, 7.04, 24.37, 24.77, 24.77, 24.97, 35.85, 20.74),
    (90, 34.64, 1.81, 25.17, 25.17, 25.17, 25.72, 32.62, 19.53),
    (99, 34.24, 6.24, 24.37, 24.77, 24.97, 24.97, 29.48, 18.12),
    (108, 33.83, 11.48, 22.76, 24.37, 24.16, 24.16, 25.78, 16.31),
    (117, 32.22, 16.31, 20.14, 22.15, 22.15, 22.15, 21.55, 14.30),
    (126, 30.21, 20.74, 17.32, 19.53, 19.53, 19.53, 17.52, 12.08),
    (135, 27.58, 24.37, 13.89, 16.31, 16.31, 16.31, 13.89, 9.86),
    (144, 24.37, 27.18, 10.47, 13.09, 13.09, 13.09, 10.47, 7.85),
    (153, 20.74, 29.28, 7.24, 9.86, 9.86, 9.86, 7.24, 5.63),
    (162, 16.71, 30.81, 4.42, 6.84, 6.84, 6.84, 4.42, 3.62),
    (171, 12.28, 32.02, 2.21, 3.62, 3.62, 3.62, 2.21, 1.81),
    (180, 7.85, 32.62, 1.20, 1.20, 1.20, 1.20, 1.20, 1.20)
], dtype=[
    ('theta', 'i4'),      # Угол поворота, градусы
    ('U_SO', 'f4'),       # Напряжение синусной обмотки, В
    ('U_CO', 'f4'),       # Напряжение косинусной обмотки, В
    ('U_SH', 'f4'),       # Напряжение с нагрузкой R_SH=300 Ом, В
    ('U_SH1C', 'f4'),     # С первичным симметрированием, В
    ('U_SH2C', 'f4'),     # Со вторичным симметрированием, В
    ('U_SH12C', 'f4'),    # С обоими видами симметрирования, В
    ('U_lo', 'f4'),       # Линейный режим холостого хода, В
    ('U_ln', 'f4')        # Линейный режим с нагрузкой, В
])

class LabReportGenerator:
    def __init__(self):
        self.doc = None
        self.sections = {}
        self.current_page_number = 1
        
    def parse_sections(self, text):
        """Парсинг текста на секции"""
        sections = {}
        lines = text.strip().split('\n')
        current_section = None
        content = []
        
        for line in lines:
            if line.startswith('[SECTION_START'):
                current_section = line.split(' ')[1].replace(']', '')
                content = []
            elif line.startswith('[SECTION_END'):
                if current_section:
                    sections[current_section] = '\n'.join(content).strip()
                current_section = None
                content = []
            elif current_section is not None:
                content.append(line)
        
        return sections
    
    def set_page_settings(self):
        """Настройка параметров страницы"""
        section = self.doc.sections[0]
        section.page_height = Cm(29.7)  # A4
        section.page_width = Cm(21)     # A4
        section.top_margin = Cm(2)
        section.bottom_margin = Cm(2)
        section.left_margin = Cm(3)
        section.right_margin = Cm(1.5)
    
    def setup_page_numbers(self):
        """Настройка нумерации страниц"""
        for section in self.doc.sections:
            footer = section.footer
            if not footer:
                continue
                
            # Очищаем существующий footer
            for paragraph in footer.paragraphs:
                p = paragraph._element
                p.getparent().remove(p)
            
            # Создаем новый footer с нумерацией
            paragraph = footer.paragraphs[0] if footer.paragraphs else footer.add_paragraph()
            paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Добавляем поле номера страницы
            run = paragraph.add_run()
            fld_char = OxmlElement('w:fldChar')
            fld_char.set(qn('w:fldCharType'), 'begin')
            run._r.append(fld_char)
            
            instr_text = OxmlElement('w:instrText')
            instr_text.set(qn('xml:space'), 'preserve')
            instr_text.text = 'PAGE'
            run._r.append(instr_text)
            
            fld_char = OxmlElement('w:fldChar')
            fld_char.set(qn('w:fldCharType'), 'end')
            run._r.append(fld_char)
            
            # Форматирование номера страницы
            for run in paragraph.runs:
                run.font.name = 'Times New Roman'
                run.font.size = Pt(10)
    
    def add_heading(self, text, level=1):
        """Добавление заголовка"""
        heading = self.doc.add_heading(text, level=level)
        for run in heading.runs:
            run.font.name = 'Times New Roman'
            run.font.size = Pt(16 if level == 1 else 14)
            run.bold = True
        return heading
    
    def add_paragraph(self, text, bold=False, italic=False):
        """Добавление абзаца текста"""
        if not text.strip():
            return
            
        p = self.doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
        run = p.add_run(text)
        run.font.name = 'Times New Roman'
        run.font.size = Pt(12)
        run.bold = bold
        run.italic = italic
        
        p.paragraph_format.line_spacing = 1.5
        p.paragraph_format.first_line_indent = Cm(1.0)
    
    def create_experimental_table(self):
        """Создание таблицы с экспериментальными данными"""
        # Заголовок таблицы
        title_para = self.doc.add_paragraph()
        title_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
        run = title_para.add_run("Таблица 1 - Экспериментальные данные")
        run.font.name = 'Times New Roman'
        run.font.size = Pt(12)
        
        # Создание таблицы
        table = self.doc.add_table(rows=1, cols=len(experimental_data.dtype.names))
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        # Заголовки столбцов
        column_names = {
            'theta': 'θ, °',
            'U_SO': 'U_SO, В',
            'U_CO': 'U_CO, В', 
            'U_SH': 'U_SH, В',
            'U_SH1C': 'U_SH1C, В',
            'U_SH2C': 'U_SH2C, В',
            'U_SH12C': 'U_SH12C, В',
            'U_lo': 'U_ЛО, В',
            'U_ln': 'U_ЛН, В'
        }
        
        hdr_cells = table.rows[0].cells
        for i, col_name in enumerate(experimental_data.dtype.names):
            hdr_cells[i].text = column_names[col_name]
            for paragraph in hdr_cells[i].paragraphs:
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in paragraph.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(10)
                    run.bold = True
        
        # Заполнение данными
        for row_data in experimental_data:
            row_cells = table.add_row().cells
            for i, col_name in enumerate(experimental_data.dtype.names):
                value = row_data[col_name]
                if isinstance(value, float):
                    cell_text = f"{value:.2f}"
                else:
                    cell_text = str(value)
                
                row_cells[i].text = cell_text
                for paragraph in row_cells[i].paragraphs:
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in paragraph.runs:
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(10)
        
        return table
    
    def add_image_with_caption(self, image_key, caption_text, width=Cm(12)):
        """Добавление изображения с подписью"""
        image_path = IMAGE_PATHS.get(image_key)
        
        if not image_path or not os.path.exists(image_path):
            # Заглушка если изображение не найдено
            self.add_paragraph(f"[Изображение {image_key} не найдено]")
            return False
        
        try:
            # Добавление изображения
            paragraph = self.doc.add_paragraph()
            paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            run = paragraph.add_run()
            run.add_picture(image_path, width=width)
            
            # Добавление подписи
            caption_para = self.doc.add_paragraph()
            caption_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            caption_run = caption_para.add_run(caption_text)
            caption_run.font.name = 'Times New Roman'
            caption_run.font.size = Pt(12)
            caption_run.italic = True
            
            return True
            
        except Exception as e:
            self.add_paragraph(f"[Ошибка загрузки изображения {image_key}: {str(e)}]")
            return False
    
    def process_section_text(self, text, section_name):
        """Обработка текста секции с заменой меток"""
        lines = text.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # Обработка специальных меток
            if line == '[TABLE_EXPERIMENTAL_DATA]':
                self.create_experimental_table()
            elif line == '[IMAGE_U_CO]':
                self.add_image_with_caption('U_CO', 'Рисунок 1 - Зависимость напряжения на косинусной обмотке U_CO от угла поворота θ')
            elif line == '[IMAGE_U_SO]':
                self.add_image_with_caption('U_SO', 'Рисунок 2 - Зависимость напряжения на синусной обмотке U_SO от угла поворота θ')
            elif line == '[IMAGE_U_SH]':
                self.add_image_with_caption('U_SH', 'Рисунок 3 - Зависимость напряжения на синусной обмотке с нагрузкой U_SH от угла поворота θ')
            elif line == '[IMAGE_U_SH1C]':
                self.add_image_with_caption('U_SH1C', 'Рисунок 4 - Зависимость напряжения U_SH1C с первичным симметрированием от угла поворота θ')
            elif line == '[IMAGE_U_SH2C]':
                self.add_image_with_caption('U_SH2C', 'Рисунок 5 - Зависимость напряжения U_SH2C со вторичным симметрированием от угла поворота θ')
            elif line == '[IMAGE_U_SH12C]':
                self.add_image_with_caption('U_SH12C', 'Рисунок 6 - Зависимость напряжения U_SH12C с обоими видами симметрирования от угла поворота θ')
            elif line == '[IMAGE_SH_voltages]':
                self.add_image_with_caption('SH_voltages', 'Рисунок 7 - Совмещенные графики характеристик синусно-косинусного режима')
            elif line == '[IMAGE_U_lo]':
                self.add_image_with_caption('U_lo', 'Рисунок 8 - Характеристика линейного режима в режиме холостого хода U_ЛО')
            elif line == '[IMAGE_U_ln]':
                self.add_image_with_caption('U_ln', 'Рисунок 9 - Характеристика линейного режима с нагрузкой U_ЛН')
            elif line == '[IMAGE_linear_voltages]':
                self.add_image_with_caption('linear_voltages', 'Рисунок 10 - Совмещенные графики характеристик линейного режима')
            else:
                # Обычный текст
                self.add_paragraph(line)
    
    def generate_report(self):
        """Генерация полного отчета"""
        try:
            # Загрузка титульного листа
            if os.path.exists(TITLE_PAGE_FILE):
                self.doc = Document(TITLE_PAGE_FILE)
                print("✓ Титульный лист загружен")
            else:
                self.doc = Document()
                print("⚠ Титульный лист не найден, создан новый документ")
            
            # Настройка документа
            self.set_page_settings()
            
            # Парсинг текста
            self.sections = self.parse_sections(report_text)
            
            # Добавление разрыва страницы после титульного листа
            self.doc.add_page_break()
            
            # Настройка нумерации страниц
            self.setup_page_numbers()
            
            # Порядок разделов
            section_order = ['Goal', 'Task', 'Theory', 'Calculations', 
                           'Conclusions', 'Test', 'Bibliography']
            
            # Русские названия разделов
            russian_names = {
                'Goal': 'Цель работы',
                'Task': 'Задача работы',
                'Theory': 'Теоретические сведения',
                'Calculations': 'Расчетно-графическая часть',
                'Conclusions': 'Выводы по работе',
                'Test': 'Ответы на контрольные вопросы',
                'Bibliography': 'Список литературы'
            }
            
            # Добавление разделов
            for i, section_name in enumerate(section_order, 1):
                if section_name in self.sections:
                    section_title = f"{i}. {russian_names[section_name]}"
                    self.add_heading(section_title, level=1)
                    self.process_section_text(self.sections[section_name], section_name)
            
            # Сохранение документа
            self.doc.save(OUTPUT_FILE)
            print(f"✓ Отчет сохранен: {OUTPUT_FILE}")
            
        except Exception as e:
            print(f"❌ Ошибка при генерации отчета: {str(e)}")
            raise

def main():
    """Основная функция"""
    print("🚀 Запуск генератора отчета по лабораторной работе...")
    print(f"📋 Номер работы: {LAB_WORK_NUMBER}")
    
    # Проверка существования изображений
    print("\n🔍 Проверка файлов изображений:")
    for key, path in IMAGE_PATHS.items():
        if os.path.exists(path):
            print(f"✓ {key}: {path}")
        else:
            print(f"⚠ {key}: {path} - не найден")
    
    # Генерация отчета
    generator = LabReportGenerator()
    generator.generate_report()
    
    print("\n✅ Генерация отчета завершена успешно!")

if __name__ == "__main__":
    main()